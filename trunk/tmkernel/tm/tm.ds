|| Tm - an interface code generator.
|| Author: C. van Reeuwijk.
||
|| All rights reserved.

|| Structure of the datastructure itself
|| The Class type is in its canonical form. Before canonization
|| it is represented as a classComponent list.
ds ::=
||    DsCons name:tmstring inherits:[tmstring] constructors:[constructor] |
    DsCons name:tmstring inherits:[tmstring] constructors:[tmstring] |
    DsTuple name:tmstring inherits:[tmstring] fields:[field] |
    DsClass name:tmstring inherits:[tmstring] fields:[field] virtual:tmbool |
    DsConstructor name:tmstring inherits:[tmstring] fields:[field];

classComponent ::=
    CCSuper super:tmstring |
    CCFields fields:[field] |
    CCAlternatives alternatives:[alternative] |
    CCSublist components:[classComponent]
    ;

alternative == ( label:tmstring, component:classComponent );

||constructor == ( name:tmstring, fields:[field] );

field == ( level:int, name:tmstring, type:tmstring );

|| The internal representation of a macro.
macro == (
    lvl:uint,		|| The context level
    name:tmstring,	|| The name of the macro
    orgfile:tmstring,	|| In which file was it defined
    fpl:[tmstring],	|| List of formal parameters
    body:[tplelm]	|| The body of the macro
);

|| The internal representation of a variable.
var == (
    lvl:uint,		|| The context level
    name:tmstring,	|| The name of the variable
    val:tmstring	|| The value of the variable
);

tplelm ::=
    Plain lno:int plainline:tmstring |
    Foreach lno:int felist:tmstring felines:[tplelm] |
    While lno:int whilecond:tmstring whilelines:[tplelm] |
    If lno:int ifcond:tmstring ifthen:[tplelm] ifelse:[tplelm] |
    Set lno:int setline:tmstring |
    GlobalSet lno:int setline:tmstring |
    Append lno:int appline:tmstring |
    GlobalAppend lno:int appline:tmstring |
    Error lno:int errstr:tmstring |
    Exit lno:int str:tmstring |
    Redirect lno:int fname:tmstring body:[tplelm] |
    Include lno:int fname:tmstring |
    Macro lno:int formpar:tmstring macbody:[tplelm] |
    Call lno:int callline:tmstring |
    Return lno:int retval:tmstring |
    Insert lno:int fname:tmstring;

