.. Tm - an interface code generator.
.. Author: C. van Reeuwijk.
..
.. All rights reserved.
..
.. file: calu.ht
.. Tm C support. Variant: array lists, union constructors.
/*** WARNING: THIS IS GENERATED CODE. ***/

/* ---- start of ${tplfilename} ---- */
/* External definitions (Version for array list).

   template file:      ${tplfilename}
   datastructure file: ${dsfilename}
   tm version:         $(tmvers)
   tm kernel version:  $(kernel-version)
 */

/* data structures */

/* forward reference typedefs for all types.
 * C does not like the use of undefined types, but does not
 * mind the use of pointers to (yet) undefined types.
 */
.foreach t $(need_ds_list)
typedef struct str_$t_list *$t_list;
.endforeach
.foreach t ${depsort $(need_ds)}
typedef struct str_$t *$t;
.endforeach

.foreach t $(need_ds)
#define $tNIL ($t)0
.endforeach
.foreach t $(need_ds_list)
#define $t_listNIL ($t_list)0
.endforeach

.foreach t ${comm $(need_ds) "" ${ctypelist}}
.if ${len ${conslist $t}}
typedef enum en_tags_$t {
    ${seplist ", " ${prefix TAG ${conslist $t}}}
} tags_$t;
.else
typedef int tags_$t;
.endif

.endforeach

.foreach t ${depsort $(need_ds)}
.. Structure definitions for all the constructors of the type
.. That have elements (C does not like empty structures or unions).
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case constructorbase
.. Constructor type
.. Generate structure definitions for all constructors with
.. fields.
.. Also set 'makeunion' if at least one such structure is
.. generated, because otherwise no union must be generated for
.. the structure of the entire type.
.set makeunion 0
.foreach c ${conslist $t}
.. Constructors with 0 elements do not have a structure..
.if ${len ${allfields $c}}
.set makeunion 1
/* Structure for constructor $c */
typedef struct str_$c {
.foreach e ${allfields $c}
    ${type $c $e} $e;
.endforeach
} C_$c;
.else
/* Constructor $c has no fields */
.endif

.endforeach
/* Constructor type $t */
struct str_$t {
    tags_$t tag;
.if $(makeunion)
    union uni_$t {
.foreach c ${conslist $t}
.. Constructors with 0 elements do not have a structure..
.if ${len ${allfields $c}}
	C_$c ue_$c;
.endif
.endforeach
    } u;
.endif
#ifdef LOGNEW
    long int lognew_id;
#endif
};
.case tuple class
struct str_$t {
.foreach e ${allfields $t}
    ${type $t $e} $e;
.endforeach
.if ${not ${len ${allfields $t}}}
    int _dummy_field;
.endif
#ifdef LOGNEW
    long int lognew_id;
#endif
};
.case constructor
.endswitch

.endforeach
.foreach t $(need_ds_list)
struct str_$t_list {
    unsigned int sz;
    unsigned int room;
    $t *arr;
#ifdef LOGNEW
    long int lognew_id;
#endif
};

.endforeach

/* Type casting macros. */
.foreach t $(need_ds)
.switch ${metatype $t}
.case constructor
.case alias
.error Internal error: alias $t still present.
.case tuple class
.foreach e ${fields $t}
#define to_$t(e) (e)
.endforeach
.case constructorbase
.foreach c ${conslist $t}
.foreach e ${fields $c}
#define to_$c(e) (&(e->u.ue_$c))
#define $c u.ue_$c
.endforeach
.endforeach
.endswitch
.endforeach

#ifdef LOGNEW
.foreach t ${nonvirtual $(want_new)}
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple class constructor
#define new_$t(${seplist , ${allfields $t}}) real_new_$t(${seplist , ${allfields $t} __FILE__ __LINE__})
.case constructorbase
.foreach c ${conslist $t}
..#define new_$c(${seplist , ${allfields $c}}) real_new_$c(${seplist , ${allfields $c} __FILE__ __LINE__})
.endforeach
.endswitch
.endforeach
.foreach t $(want_new_list)
#define new_$t_list() real_new_$t_list(__FILE__,__LINE__)
.endforeach
..
.. slice_<type>() routines
.foreach t $(want_slice_list)
#define slice_$t_list(l,b,e) real_slice_$t_list(l,b,e,__FILE__,__LINE__)
.endforeach
..
.. rdup_<type>() routines
.foreach t $(want_rdup)
#define rdup_$t(e) real_rdup_$t(e,__FILE__,__LINE__)
.endforeach
.foreach t $(want_rdup_list)
#define rdup_$t_list(e) real_rdup_$t_list(e,__FILE__,__LINE__)
.endforeach
..
.. fscan_<type>() routines
.foreach t $(want_fscan)
#define fscan_$t(f,e) real_fscan_$t(f,e,__FILE__,__LINE__)
.endforeach
.foreach t $(want_fscan_list)
#define fscan_$t_list(f,l) real_fscan_$t_list(f,l,__FILE__,__LINE__)
.endforeach
#endif

.. new_<cons> and new_<type> routines
.foreach t $(want_new)
.switch ${metatype $t}
.case constructor
.. Nothing: is done by constructorbase
.case alias
.error Internal error: alias $t still present.
.case tuple class
.set tl
.foreach e ${allfields $t}
.append tl ${type $t $e}
.endforeach
#ifdef LOGNEW
.if ${len $(tl)}
extern $t real_new_$t( ${seplist ", " $(tl)}, const char *_f, const int _l );
.else
extern $t real_new_$t( const char *_f, const int _l );
.endif
#else
.if ${len $(tl)}
extern $t new_$t( ${seplist ", " $(tl)} );
.else
extern $t new_$t( void );
.endif
#endif
.case constructorbase
.foreach c ${conslist $t}
.set tl
.foreach e ${allfields $c}
.append tl ${type $c $e}
.endforeach
#ifdef LOGNEW
.if ${len $(tl)}
extern $t real_new_$c( ${seplist ", " $(tl)}, const char *, const int );
.else
extern $t real_new_$c( const char *, const int );
.endif
#else
.if ${len $(tl)}
extern $t new_$c( ${seplist ", " $(tl)} );
.else
extern $t new_$c( void );
.endif
#endif
.endforeach
.endswitch
.endforeach
#ifdef LOGNEW
.foreach t $(want_new_list)
extern $t_list real_new_$t_list( const char *file, const int line );
.endforeach
#else
.foreach t $(want_new_list)
extern $t_list new_$t_list( void );
.endforeach
#endif
..
.. setroom_<type>_list functions.
.. For this library they are dummy functions.
.foreach t $(want_setroom_list)
extern $t_list setroom_$t_list( $t_list, const unsigned int );
.endforeach
..
.. append_<type>_list() routines.
.foreach t $(want_append_list)
extern $t_list append_$t_list( $t_list, $t );
.endforeach
..
.. reverse_<type>_list() routines.
.foreach t $(want_reverse_list)
extern $t_list reverse_$t_list( $t_list );
.endforeach
..
.. insert_<type>_list() routines.
.foreach t $(want_insert_list)
extern $t_list insert_$t_list( $t_list, const unsigned int, $t  );
.endforeach
..
.. delete_<type>_list() routines.
.foreach t $(want_delete_list)
extern $t_list delete_$t_list( $t_list, const unsigned int );
.endforeach
..
.. extract_<type>_list() routines.
.foreach t $(want_extract_list)
extern $t_list extract_$t_list( $t_list, const unsigned int, $t *, int * );
.endforeach
..
.. concat_<type>_list() routines
.foreach t $(want_concat_list)
extern $t_list concat_$t_list( $t_list, $t_list );
.endforeach
..
.. fre_<type>_list() routines
.foreach t $(want_fre_list)
extern void fre_$t_list( $t_list );
.endforeach
.foreach t $(want_fre)
extern void fre_$t( $t );
.endforeach
..
.. rfre_<type>_list() routines
.foreach t $(want_rfre_list)
extern void rfre_$t_list( $t_list );
.endforeach
.foreach t $(want_rfre)
extern void rfre_$t( $t );
.endforeach
..
.. print_<type>() routines
.foreach t $(want_print)
extern void print_$t( TMPRINTSTATE *, const $t );
.endforeach
.foreach t $(want_print_list)
extern void print_$t_list( TMPRINTSTATE *, const $t_list );
.endforeach
..
.. fprint_<type>() routines
.foreach t $(want_fprint)
extern void fprint_$t( FILE *, const $t );
.endforeach
.foreach t $(want_fprint_list)
extern void fprint_$t_list( FILE *, const $t_list );
.endforeach
..
.. slice_<type>() routines
#ifdef LOGNEW
.foreach t $(want_slice_list)
extern $t_list real_slice_$t_list(
 const $t_list l,
 const unsigned int b,
 const unsigned int e,
 const char *_f,
 const int _l
);
.endforeach
#else
.foreach t $(want_slice_list)
extern $t_list slice_$t_list( $t_list, const unsigned int, const unsigned int );
.endforeach
#endif
..
.. rdup_<type>() routines
#ifdef LOGNEW
.foreach t $(want_rdup)
extern $t real_rdup_$t( const $t, const char *_f, const int _l );
.endforeach
.foreach t $(want_rdup_list)
extern $t_list real_rdup_$t_list( const $t_list, const char *_f, const int _l );
.endforeach
#else
.foreach t $(want_rdup)
extern $t rdup_$t( const $t );
.endforeach
.foreach t $(want_rdup_list)
extern $t_list rdup_$t_list( const $t_list );
.endforeach
#endif
..
.. fscan_<type>() routines
#ifdef LOGNEW
.foreach t $(want_fscan)
extern int real_fscan_$t( FILE *, $t *, const char *, const int );
.endforeach
.foreach t $(want_fscan_list)
extern int real_fscan_$t_list( FILE *, $t_list *, const char *, const int );
.endforeach
#else
.foreach t $(want_fscan)
extern int fscan_$t( FILE *, $t * );
.endforeach
.foreach t $(want_fscan_list)
extern int fscan_$t_list( FILE *, $t_list * );
.endforeach
#endif
..
.. cmp_<type>() routines
.foreach t $(want_cmp)
extern int cmp_$t( const $t a, const $t b );
.endforeach
.foreach t $(want_cmp_list)
extern int cmp_$t_list( const $t_list a, const $t_list b );
.endforeach
..
.. Misc. functions.
.if ${member flush_$(basename) $(want_misc)}
extern void flush_$(basename)( void );
.endif
.if ${member stat_$(basename) $(want_misc)}
extern void stat_$(basename)( FILE * );
.endif
.if ${member get_balance_$(basename) $(want_misc)}
extern int get_balance_$(basename)( void );
.endif
..
/* ---- end of ${tplfilename} ---- */
/* Code generation required ${processortime} milliseconds. */
