General
-------

This directory contains the sources for the template manager program itself.
Please read this file before installing the program.

To be able to compile Tm, you must first have compiled and installed
the Tm C support library, as found in libtmc. Please install this
before you try to compile this. Alternatively, you can use the Makefile in
the parent directory; this will compile everything in the correct order.

Tm requires an ANSI C compiler.

Tm has been compiled and tested on the following systems:
 - SunOS 4.1.3 with the GNU C compiler
 - Atari ST with the Pure C compiler version 2.1
 - MS-Windows 3.1 and 95 with the Borland C++ compiler version 4.5

Older versions have been compiled on lots of other UNIX systems, but
this has not been tested with the new configure script.

See the sections ``Compiling and installing on Atari ST'', and
``Compiling and installing on MS-Windows'' for compilation and
installation on these systems.

Compiling and installing
------------------------

Before you can compile Tm, you must configure the Makefile and the
configuration header file.  You do this by simply typing

    configure

at the command prompt. This will set reasonable defaults for the compilation.
See below if you want the change the installation directory or the
command to invoke the C compiler.

After than you can make all compilation targets with

    make all

run some tests on the results with

    make test

and install the software with

    make install

To delete the intermediate files generated by the complation process,
use

    make clean

or use

    make empty

to delete all files that can be generated from other files.

***WARNING***

To compile tm you need tm! In the distributed version this is solved
by including the code that is generated by tm in the distribution,
but before you do 'make clean' make sure that you have succesfully
compiled and installed libtmc, tm and tmc.

There are other targets in the Makefile. Do

    make help

to get an overview of them.

Changing compilation options
----------------------------

The configure script will determine on what kind of system you are,
and will adapt a number of parameters accordingly. If the configure
script can find the GNU C compiler (gcc), it will use that, else it
will use the standard C compiler on your system (cc). To over-ride
this behavior, you can give configure an value for the compiler
variable `CC' by setting it in the environment.  For example (assuming
you use the csh(1)):

    setenv CC cc -Aa
    configure

The environment variable needs only be visible at the moment you run
configure.

The program will be installed <prefix>/bin. By default <prefix> is
determined by the place the GNU compiler is found, or if that cannot
be found it is '/usr/local'.  To change the prefix, you can give
configure the option '--prefix=<path>'. For example, with

    configure --prefix=/usr/blob

Tm will be installed in /usr/blob/bin.

Compiling and installing on Atari ST
------------------------------------

For compiling with the Pure C compiler on the Atari ST, a tmtos.prj
is provided. The file 'makefile.tos' contains a few rules to make
tmcode.c and tmcode.h, run tests, and install the program.

Compiling and installing on MS-Windows
--------------------------------------


For compiling with the Borland C++ compiler under MS-Windows, a separate
makefile and config.h are provided. In the distribution they are called
'makefile.tc' and config.htc', respectively. To use them, do:
    copy makefile.tc makefile
    copy config.htc config.h
You probably want to edit the makefile to define the proper installation
paths, choose between 16 bits and 32 bits compilation, etc.
See the makefile for further explanation.

The same make targets as for UNIX are provided.

As much as possible, standard MSDOS commands are used in the makefile.
This makes it a bit clunky, but for the most part this has succeeded.
However, there is no standard MSDOS equivalent for the UNIX command 'diff'.
You may want to get a public-domain version of the program somewhere,
or you can do the file comparison by hand.


Files and their purpose
-----------------------

changes		What is changed between versions
dsparser.c	Parser for the datastructures defn's
error.c		Error handling routines
filelist	This file
flag.c		Parse a debugging flags string
fn.c		Handling of ${} (function) expressions
global.c	Declaration of all global variables
gooderr		The correct error output for the test run
goodout		The correct output for the test run
lex.c		Lexical analyzer for the parsing of datastructure definitions
makefile	Generic makefile
misc.c		Miscellaneous routines
readme		Short explanation
refex.c		Regular expression routines for file-style regular expressions
srchfile.c	Search for a file in the given path
sub.ds		Datastructure definitions file included by test.ds
test.ds		Datastructure definitions used in the test run
testin		Input (template) file for the test run
testsub		Included file for the test run
tm.1		Manual page (in 'man' format)
tm.c		main() and some initalizations
tm.ds		Datastructure definitions used in Tm itself
tm.prj		Project file for Turbo C++ for dos 3.0
tmcode.ct	Template for the Tm code used in Tm itself
tmcode.ht	Template for the Tm code header file
tmdefs.h	Global definitions for all .c files
tmexpr.c	Evaluation of numerical expressions ($[]) expressions
tmpath.c	Path specification. Generated from Makefile on UNIX
tmspec.t	Specification file for the Tm code used in Tm itself
tmstring.c	String handling routines
tmtos.prj	Project file for Pure C/Turbo C for Atari ST with TOS
tmtrans.c	Translation routines: read template code, and write output
tmvers.c	Version definition variables. Generated from Makefile on UNIX
var.c		Variable handling


The following files are generated by Tm. They are included in the Tm
distribution to prevent a booting problem (you'd need a working Tm to
generate these files, but you can only compile Tm when you have them..)

tmcode.h
tmcode.c


The following .h files are contain external declarations for the
corresponding .c files:

dsparser.h
refex.h
srchfile.h
tmexpr.h
tmpath.h
tmstring.h
tmtrans.h
tmvers.h
var.h
misc.h
error.h
flag.h
fn.h
global.h
lex.h
