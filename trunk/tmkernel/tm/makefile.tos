# Tm - an interface code generator.
# Author: C. van Reeuwijk.
#
# All rights reserved.
#
# This version is specific for Pure C for Atari ST.
#
# A few variables can be defined below to change the configuration
#
# Since Pure C does not have a command line version, part of the
# compilation must be done with the supplied project file tmtos.prj.
#
# Most important in this makefile are the rules to make tmcode.c and
# tmcode.h; and the rule to test the resulting tm.ttp

# You can customize this Makefile for your system by editing
# the variables immediately below. The current values are not magical;
# they just reflect what I use.
#  LOCALBIN	The place to put binaries
#  LOCALLIB	The place to get libraries and templates
#  LOCALINC	The place to get local include (.h) files
LOCALBIN = c:\bin
LOCALLIB=c:\lib
LOCALINC=c:\include
PROGBASE = tm
PROG = $(PROGBASE).ttp

LINKER = $(CC)
LIBS = $(LOCALLIB)\tmc.lib

VERSION=35

# -I flags for  .h files
IPATH = -I$(LOCALINC)

CFLAGS = $(IPATH) $(SYSCFLAGS) -DCACHESZ=0 -DVERSION=$(VERSION)
LDFLAGS	= $(CFLAGS)

MAKEFILE      = Makefile

SRCS	      = refex.c \
		tm.c \
		flag.c \
		tmcode.c \
		error.c \
		tmexpr.c \
		fn.c \
		global.c \
		dsparser.c \
		lex.c \
		tmpath.c \
		misc.c \
		expand.c \
		tmstring.c \
		tmtrans.c \
		var.c \
		srchfile.c

OBJS = $(SRCS:.c=.o)

help:
	@echo Possible make targets:
	@echo all:  Create local running programs.
	@echo test: Run tests.
	@echo install: Install relevant files.
	@echo clean: Delete all intermediate files.
	@echo empty: Delete all files that can be re-generated.

all: $(PROG)

install: $(PROG)
	cp $(PROG) $(LOCALBIN)\$(PROG)

empty:
	del *.o
	del tmcode.c
	del tmcode.h
	del tmpath.c
	del testout
	del testerr
	del $(PROG)

clean:
	del *.o
	del tmpath.c
	del testout
	del testerr

tmcode.h: tmcode.ht tm.ds tmspec.t
	tm tm.ds tmcode.ht > tmcode.h

tmcode.c: tmcode.ct tm.ds tmspec.t
	tm tm.ds tmcode.ct > tmcode.c

tmpath.c: $(MAKEFILE)
	echo char libpath[]="$(TPLPATH)"; > tmpath.c

version.h: ..\\version.h
	cp ..\\version.h version.h

test: testin sub.ds test.ds testsub goodout gooderr
	-.\$(PROG) -v -stest1 -stest2=a -Ibla -o testout -e testerr test.ds testin
	diff testout goodout
	diff testerr gooderr
	diff testrdir goodrdir

###
refex.o: tmdefs.h refex.h
tm.o: tmdefs.h tmcode.h tmstring.h error.h fn.h lex.h \
	misc.h tmtrans.h var.h global.h dsparser.h srchfile.h version.h
tmcode.o: tmdefs.h tmcode.h tmstring.h global.h
error.o: tmdefs.h tmcode.h tmstring.h global.h error.h config.h
tmexpr.o: tmdefs.h tmcode.h tmstring.h error.h tmexpr.h global.h misc.h
fn.o: tmdefs.h refex.h tmcode.h tmstring.h error.h fn.h \
	global.h misc.h var.h srchfile.h
global.o: tmdefs.h tmcode.h tmstring.h global.h
dsparser.o: tmdefs.h tmcode.h tmstring.h error.h global.h lex.h \
	misc.h dsparser.h
lex.o: tmdefs.h tmcode.h tmstring.h error.h global.h \
	lex.h misc.h srchfile.h
misc.o: tmdefs.h misc.h error.h tmcode.h
tmstring.o: tmdefs.h tmcode.h tmstring.h misc.h error.h
tmtrans.o: tmdefs.h tmcode.h tmstring.h fn.h tmexpr.h error.h \
	expand.h global.h tmpath.h misc.h tmtrans.h var.h srchfile.h
var.o: tmdefs.h tmcode.h tmstring.h misc.h error.h var.h \
	global.h
srchfile.o: tmdefs.h tmcode.h srchfile.h
flag.o: tmdefs.h flag.h
expand.o: tmdefs.h global.h expand.h tmcode.h config.h error.h misc.h
