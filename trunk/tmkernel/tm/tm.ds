|| Tm - an interface code generator.
|| Author: C. van Reeuwijk.
||
|| All rights reserved.

|| Structure of the datastructure itself
|| The Class type is in its canonical form. Before canonization
|| it is represented as a classComponent list.
ds = { name:tmstring, inherits:[tmstring] } +
    DsConstructorBase: { constructors:[tmstring] } |
    DsTuple: { fields:[field] } |
    DsClass: { fields:[field], virtual:tmbool } |
    DsConstructor: { fields:[field] };

classComponent =
    CCSuper: { super:tmstring } |
    CCFields: { fields:[field] } |
    CCAlternatives: { alternatives:[alternative] } |
    CCSublist:  { components:[classComponent] }
    ;

alternative == ( label:tmstring, component:classComponent );

field == ( level:int, name:tmstring, type:tmstring );

|| The internal representation of a macro.
macro == (
    lvl:uint,		|| The context level
    name:tmstring,	|| The name of the macro
    orgfile:tmstring,	|| In which file was it defined
    fpl:[tmstring],	|| List of formal parameters
    body:[tplelm]	|| The body of the macro
);

|| The internal representation of a variable.
var == (
    lvl:uint,		|| The context level
    name:tmstring,	|| The name of the variable
    val:tmstring	|| The value of the variable
);

switchcase == ( cases:tmstring, action:[tplelm] );

tplelm = { lno:int } +
    Plain: { line:tmstring } |
    Foreach: { felist:tmstring, body:[tplelm] } |
    While: { cond:tmstring, body:[tplelm] } |
    If: { cond:tmstring, ifthen:[tplelm], ifelse:[tplelm] } |
    Switch: { val:tmstring, cases:[switchcase], deflt:[tplelm] } |
    Set: { line:tmstring } |
    Rename: { line:tmstring } |
    GlobalSet: { line:tmstring } |
    Append: { line:tmstring } |
    GlobalAppend: { line:tmstring } |
    Error: { str:tmstring } |
    Exit: { str:tmstring } |
    Redirect: { fname:tmstring, body:[tplelm] } |
    Appendfile: { fname:tmstring, body:[tplelm] } |
    Macro: { formals:tmstring, body:[tplelm] } |
    Call: { line:tmstring } |
    Return: { retval:tmstring } |
    Include: { fname:tmstring } |
    Insert: { fname:tmstring } |
    || The two statements below are constructed only temporary.
    || They are removed once the complete switch statement has
    || been digested.
    Case: { val:tmstring } |
    Default: {}
    ;

