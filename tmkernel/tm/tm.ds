|| Tm - an interface code generator.
|| Author: C. van Reeuwijk.
||
|| All rights reserved.

|| An origin descriptor.
|| This is tacked to all sorts of constructs for which it is useful
|| to track the file and line number they started in.
origin == ( file:tmsymbol, line:tmuint );

|| A symbol with its origin.
origsymbol == ( sym:tmsymbol, org:origin );

|| Structure of the datastructure itself
|| The Class type is in its canonical form. Before canonization
|| it is represented as a classComponent list.
||
|| The list of inheritors of this type is a memoize of a lengthy
|| and frequently used calculation.
ds = { name:tmstring, inherits:[tmstring], inheritors:[tmstring] } +
    DsConstructorBase: { constructors:[tmstring] } |
    DsTuple: { fields:[Field] } |
    DsClass: { fields:[Field], isvirtual:tmbool } |
    DsConstructor: { fields:[Field] } |
    DsAlias: { type:Type }
    ;

classComponent =
    CCSuper: { super:tmstring } |
    CCFields: { fields:[Field] } |
    CCAlternatives: { alternatives:[alternative] } |
    CCSublist:  { components:[classComponent] }
    ;

alternative == ( label:tmstring, component:classComponent );

Type == ( level:tmuint, basetype:tmstring );

Field == ( name:tmsymbol, type:Type );

|| The internal representation of a macro.
macro == (
    lvl:tmuint,		|| The context level
    name:tmstring,	|| The name of the macro
    orgfile:tmstring,	|| In which file was it defined
    fpl:[tmstring],	|| List of formal parameters
    body:[tplelm]	|| The body of the macro
);

|| The internal representation of a variable.
var == (
    lvl:tmuint,		|| The context level
    name:tmstring,	|| The name of the variable
    val:tmstring	|| The value of the variable
);

Switchcase == ( cases:tmstring, action:[tplelm] );

tplelm = { lno:tmuint } +
    Plain: { line:tmstring } |
    For: { parms:tmstring, body:[tplelm] } |
    Foreach: { felist:tmstring, body:[tplelm] } |
    While: { cond:tmstring, body:[tplelm] } |
    If: { cond:tmstring, ifthen:[tplelm], ifelse:[tplelm] } |
    Switch: { val:tmstring, cases:[Switchcase], deflt:[tplelm] } |
    Set: { line:tmstring } |
    Split: { line:tmstring } |
    Rename: { line:tmstring } |
    GlobalSet: { line:tmstring } |
    GlobalSplit: { line:tmstring } |
    Append: { line:tmstring } |
    GlobalAppend: { line:tmstring } |
    DeleteType: { line:tmstring } |
    Error: { str:tmstring } |
    Exit: { str:tmstring } |
    Redirect: { fname:tmstring, body:[tplelm] } |
    Appendfile: { fname:tmstring, body:[tplelm] } |
    Macro: { formals:tmstring, body:[tplelm] } |
    Call: { line:tmstring } |
    Return: { retval:tmstring } |
    Include: { fname:tmstring } |
    Insert: { fname:tmstring } |
    || The two statements below are constructed only temporary.
    || They are removed once the complete switch statement has
    || been digested.
    Case: { val:tmstring } |
    Default: {}
    ;

