Welcome to the tm kernel distribution.

General
-------

This directory contains three directories that form the kernel of the
Template Manager ('Tm'). 

This is copyrighted freeware. For details read the file LICENCE, and
don't forget to send me that postcard.

Before you install the program you should read at least this file, and
the LICENCE file. If you want to know what has changed in the most
recent deistribution, see the CHANGES file.

** Please read this file before installing the program. **

To be able to compile Tm, you must first have compiled and installed the
Tm C support library, as found in the directory 'libtmc', and Tm itself, as
found in the directory 'tm'. You can then install the templates. This
is done by the Makefile supplied here.

Tm requires an ANSI C compiler.

Tm C templates has been compiled and tested on the following systems:
 - SunOS 4.1.3 with the GNU C compiler
 - Atari ST with the Pure C compiler version 2.1
 - MS-Windows 3.1 and 95 with the Borland C++ compiler version 4.5
   and 5.0.

Older versions have been compiled on lots of other UNIX systems, but
this has not been tested with the new configure script.

See the sections ``Compiling and installing on Atari ST'', and
``Compiling and installing on MS-Windows'' for compilation and
installation on these systems.

Compiling and installing
------------------------

Before you can compile Tm, you must configure the Makefile and the
configuration header file.  You do this by simply typing

    configure

at the command prompt. This will set reasonable defaults for the compilation.
See below if you want the change the installation directory or the
command to invoke the C compiler.

After than you can make all compilation targets with

    make all

run some tests on the results with

    make check

and install the software with

    make install

To delete the intermediate files generated by the complation process,
use

    make clean

or use

    make empty

to delete all files that can be generated from other files.

***WARNING***

To compile tm you need tm! In the distributed version this is solved
by including the code that is generated by tm in the distribution,
but before you do 'make clean' make sure that you have succesfully
compiled and installed libtmc, tm and tmc.

There are other targets in the Makefile. Do

    make help

to get an overview of them.

Changing compilation options
----------------------------

The configure script will determine on what kind of system you are,
and will adapt a number of parameters accordingly. If the configure
script can find the GNU C compiler (gcc), it will use that, else it
will use the standard C compiler on your system (cc). To over-ride
this behavior, you can give configure an value for the compiler
variable `CC' by setting it in the environment.  For example (assuming
you use the csh(1)):

    setenv CC cc -Aa
    configure

The environment variable needs only be visible at the moment you run
configure.

The program will be installed in <prefix>/bin. By default <prefix> is
determined by the place the GNU compiler is found, or if that cannot
be found it is '/usr/local'.  To change the prefix, you can give
configure the option '--prefix=<path>'. For example, with

    configure --prefix=/usr/blob

Tm will be installed in /usr/blob/bin.

Documentation
-------------

This package no longer contains a manual; that is in a separate package
'kerneldoc'.


Compiling and installing on Atari ST
------------------------------------

For compiling with the Pure C compiler on the Atari ST, you must compile
and install the packages in the order 'libtmc', 'tm', 'tmc'.  See the
README files in each of the directories. Note that as of version 1.2,
the Atari ST version is no longer supported (I have sold my ST).

Compiling and installing on MS-Windows
--------------------------------------

For compiling with the Borland C++ compiler under MSDOS/MS-Windows, you must
compile and install the packages in the order 'libtmc', 'tm', 'tmc'.
See the README files in each of the directories.

A file 'config.bat' is provided, that copies the MS-Windows specific
makefiles and config.h files to the generally used ones.
