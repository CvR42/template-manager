.. File: tmcanalyzertest.ct
..
.. Tree analyzer
..
.set reduction_type int
.set neutral_element (0)
.set analysis_name add
..
.macro generate_formal_parameters nm t
.return "( $t $(nm) )"
.endmacro
..
.macro generate_actual_parameters nm should_type is_type
.if ${eq $(should_type) $(is_type)}
.return "( $(nm) )"
.else
.return "( ($(should_type)) $(nm) )"
.endif
.endmacro
..
.macro generate_reduction_operation a b
.return "($a)+($b)"
.endmacro
..
.macro generate_empty_analyzer_body indent var t
$(indent)(void) $(var);
$(indent)(void) n;
.endmacro
..
.. Actions for all visited types
.set analyze_action_int function add_int_action
.set analyze_action_exprConst reduction
.set analyze_action_exprPlus reduction 1
.set analyze_action_exprSubtract reduction (-1)
.set analyze_action_foldexpr reduction
.set analyze_action_expr reduction
.set analyze_action_internalExpr reduction
.set analyze_action_exprFold reduction
..
.insert tmcanalyze.t
..
.set visit_types ${call calc_analyzer "expr" "int"}
..
/* File: tmcanalyzetest.c
 *
 * A test analyzer that return the sum of all ints in an expr tree.
 */

#include <tmc.h>

#include "tmccode.h"

typedef expr foldexpr;

.call generate_analyzer_forwards "$(visit_types)"

/* ----------- Actors ----------- */

/* Add action for 'int'. */
static int add_int_action( int elm )
{
    return elm;
}

.call generate_analyzer "$(visit_types)"

int main( void )                             
{
    expr x;                                                     
    FILE *infile;
    FILE *outfile;
    $(reduction_type) res;

    infile = fopen( "tmcwalkin", "r" );
    if( infile == NULL ){
        fprintf( stderr, "Cannot open input file" );
        exit( EXIT_FAILURE );
    }
    outfile = fopen( "testout", "w" );
    if( outfile == NULL ){
        fprintf( stderr, "Cannot open output file" );
        exit( EXIT_FAILURE );
    }
    tm_lineno = 1;
    if( fscan_expr( infile, &x ) ){
        fprintf( stderr, "tmcwalktest: %d: %s\n", tm_lineno, tm_errmsg );
        exit( EXIT_FAILURE );
    }
    res = add_expr${call generate_actual_parameters x expr expr};
    rfre_expr( x );
    fprintf( outfile, "res = %d\n", res );
    if( get_balance_ds() != 0 || get_balance_tmstring() != 0 ){
        fprintf( stderr, "Tm object allocation not balanced\n" );
        stat_ds( stderr );
        stat_tmstring( stderr );
        report_lognew( stderr );
	exit( EXIT_FAILURE );
    }
    exit( EXIT_SUCCESS );
    return 0;             
}

