.. Tm - an interface code generator.
.. Author: C. van Reeuwijk.
..
.. All rights reserved.
..
.. file: tmcpp.ct
.. tm C++ support.
..
.. The following variables must be set in tm:
.. basename:     the name of the module. used to generate stat_..
.. wantdefs:     the names of the wanted definitions.
..  OR
.. alldefs:      All code.
..
.. The following C pre-processor variables may be defined:
.. FATAL(msg)    If you want to supply a fatal error handler to print 'msg'.
..               A default is provided.
..
//*** WARNING: THIS IS GENERATED CODE. ***

.call no_multiple_inheritance "$(need_ds)"
.call no_childless_virtual "$(need_ds)"
.set problem 0
.foreach t ${tuplelist}
.if ${len ${inherits $t}}
.error A tuple should not inherit:
.error $t inherits from ${inherits $t}
.set problem 1
.endif
.if ${len ${inheritors $t}}
.error A tuple should not have inheritors:
.error ${seplist ", " ${inheritors $t}} inherits from $t
.set problem 1
.endif
.endforeach
.if $(problem)
.exit 1
.endif
..
// ---- start of ${tplfilename} ----

// Routines for '$(basename)'.
//
// template file:      ${tplfilename}
// datastructure file: ${dsfilename}
// tm version:         $(tmvers)
// tm kernel version:  $(kernel-version)

// Counters for allocation and freeing.
.foreach t $(need_stat_list)
unsigned long $t_list::newcount = 0;
unsigned long $t_list::freecount = 0;
.endforeach
.foreach t $(need_stat)
unsigned long $t::newcount = 0;
unsigned long $t::freecount = 0;
.endforeach

static char tm_srcfile[] = __FILE__;

#ifndef FATAL
#define FATAL(msg) tm_fatal(tm_srcfile,__LINE__,msg)
#endif

// Error strings.
.if ${len ${comm $(need_fscan) "" ${ctypelist} ${classlist}}}
static char tm_badcons[] = "bad constructor for '%s': '%s'";
.endif
.if ${len $(need_fscan_list)}
static char tm_badeof[] = "unexpected end of file";
.endif
.if ${len $(need_slice_list)}
static char tm_badslice[] = "bad slice";
.endif

#ifndef FATALTAG
#define FATALTAG(tag) tm_badtag(tm_srcfile,__LINE__,(int) tag)
#endif

///////////////////////////////////////////////////
// Constructors and destructors
///////////////////////////////////////////////////

.foreach t $(need_ds)
// General constructor
.set tl ${call ansi_nproto $t "${allfields $t}"}
$t::$t( $(tl) )
.set comma :
.foreach st ${inherits $t}
    $(comma)$(st)( ${seplist ", " ${prefix "p_" ${allfields $(st)}}} )
.set comma ,
.endforeach
.foreach e ${fields $t}
    $(comma)$e( p_$e )
.set comma ,
.endforeach
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
.case class constructorbase constructor
.if ${not ${isvirtual $t}}
    tag = TAG$t;
.endif
.endswitch
.if ${member $t $(need_stat)}
    newcount++;
.endif
}

// Copy constructor
.set comma :
.set used 0
$t::$t( const $t &c )
.foreach st ${inherits $t}
    $(comma)$(st)(
.set subcomma
.foreach fn ${allfields $(st)}
.set subet ${type $(st) $(fn)}
.if ${member $(subet) $(valuetypes)}
        $(subcomma)c.$(fn)
.else
.if ${member $(subet) $(legacytypes)}
        $(subcomma)rdup_$(subet)( c.$(fn) )
.else
        $(subcomma)c.$(fn)->clone()
.endif
.endif
.set subcomma ,
.endforeach
    )
.set comma ,
.if ${len ${allfields $(st)}}
.set used 1
.endif
.endforeach
.foreach e ${fields $t}
.set et ${type $t $e}
.if ${member $(et) $(valuetypes)}
    $(comma)$e( c.$e )
.else
.if ${member $(et) $(legacytypes)}
    $(comma)$e( rdup_$(et)( c.$e ) )
.else
    $(comma)$e( c.$e->clone() )
.endif
.endif
.set comma ,
.set used 1
.endforeach
{
.if ${not $(used)}
    (void) c;
.endif
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
.case class constructorbase constructor
.if ${not ${isvirtual $t}}
    tag = TAG$t;
.endif
.endswitch
.if ${member $t $(need_stat)}
    newcount++;
.endif
}

// Destructor
$t::~$t()
{
.if ${member $t $(need_stat)}
    freecount++;
.endif
}

.endforeach
.foreach t $(need_ds_list)
// Normal constructor
$t_list::$t_list( const size_type rm ): sz(0), room(0), arr(0)
{
    reserve( rm );
.if ${member $t $(need_stat_list)}
    newcount++;
.endif
}

// Copy constructor
$t_list::$t_list( const $t_list &l ): sz(0), room(0), arr(0)
{
    reserve( l.room );
    for( size_type ix=0; ix<l.sz; ix++ ){
.if ${member $t $(valuetypes)}
	arr[ix] = l.arr[ix];
.else
.if ${member $t $(legacytypes)}
	arr[ix] = rdup_$t( l.arr[ix] );
.else
	arr[ix] = l.arr[ix]->clone();
.endif
.endif
    }
    sz = l.sz;
.if ${member $t $(need_stat_list)}
    newcount++;
.endif
}

// Destructor
$t_list::~$t_list()
{
    if( arr != 0 ){
	free( arr );
    }
.if ${member $t $(need_stat_list)}
    freecount++;
.endif
}

.endforeach

.if ${len $(need_ds_list)}
///////////////////////////////////////////////////
// array room reservation routines
///////////////////////////////////////////////////

.foreach t $(need_ds_list)
.set stic_$t "static "
.endforeach
.foreach t $(want_reserve_list)
.set stic_$t
.endforeach
.foreach t $(need_ds_list)
// Announce that you will need room for 'rm' elements in this list.
void $t_list::reserve( const size_type rm )
{
    if( room>=rm ){
	return;
    }
    if( room==0 ){
	arr = (value_type *) tm_malloc( rm * sizeof(*(arr)) );
    }
    else {
	arr = (value_type *) tm_realloc( arr, rm * sizeof(*(arr)) );
    }
    room = rm;
}

.endforeach
.endif
.if ${len $(need_append_list)}
///////////////////////////////////////////////////
//    Append routines
///////////////////////////////////////////////////

.foreach t $(need_append_list)
// Append a $t element 'e'.
void $t_list::append( value_type e )
{
    if( sz >= room ){
	reserve( 1+sz+sz );
    }
    arr[sz] = e;
    sz++;
}

.endforeach
.endif
.if ${len $(need_reverse_list)}
///////////////////////////////////////////////////
//    reverse methods
///////////////////////////////////////////////////

.foreach t $(need_reverse_list)
// Reverse the elements in the list.
void $t_list::reverse()
{
    size_type ix = 0;
    size_type other = sz-1;
    value_type *p = arr;
    while( ix<other ){
	value_type h = p[ix];
	p[ix] = p[other];
	p[other] = h;
	ix++;
	other--;
    }
}

.endforeach
.endif
.if ${len $(need_insert_list)}
///////////////////////////////////////////////////
//    insert_<type>_list routines
///////////////////////////////////////////////////

.foreach t $(need_insert_list)
// Insert a $t element 'e' at position 'pos'.
void $t_list::insert( const size_type pos, value_type e )
{
    size_type the_pos = pos;

    if( sz >= room ){
	reserve( 1+sz+sz );
    }
    if( the_pos>sz ){
	the_pos = sz;
    }
    for( size_type ix=sz; ix>the_pos; ix-- ){
	arr[ix] = arr[ix-1];
    }
    sz++;
    arr[the_pos] = e;
}

.endforeach
.endif
.if ${len $(need_insertlist_list)}
///////////////////////////////////////////////////
//    insertlist methods
////////////////////////////////////////////////////

.foreach t $(need_insertlist_list)
// Insert a $t list 'lb' to into this at position 'pos'.
// The elements of 'lb' are copied into this list, and the
// container is destroyed.
void $t_list::insertlist( size_type pos, $t_list &lb )
{
    const size_type szb = lb.sz;

    reserve( sz+szb );
    if( pos>sz ){
	pos = sz;
    }
    // Move up elements
    {
	for( size_type ix=sz+szb-1; ix>pos; ix-- ){
	    arr[ix] = arr[ix-szb];
	}
    }
    sz += szb;
    // Copy in elements from 'lb'
    {
	size_type cnt = szb;
	value_type *sp = lb.arr;
	value_type *dp = &arr[pos];

	while( cnt!=0 ){
	    *dp++ = *sp++;
	    cnt--;
	}
    }
    delete &lb;
}

.endforeach
.endif
.if ${len $(need_concat_list)}
///////////////////////////////////////////////////
//    Concatenate methods
///////////////////////////////////////////////////

.foreach t $(need_concat_list)
// Concatenate $t list 'lb' after this. The elements of 'lb' are
// copied into this list', and the container is destroyed.
void $t_list::concat( $t_list *lb )
{
    value_type *sp;
    value_type *dp;

    reserve( sz+lb->size() );
    size_type cnt = lb->size();
    sp = lb->arr;
    dp = &arr[sz];
    while( cnt!=0 ){
	*dp++ = *sp++;
	cnt--;
    }
    sz += lb->size();
    delete lb;
}

.endforeach
.endif
.if ${len $(need_destroy) $(need_destroy_list)}
///////////////////////////////////////////////////
//    Recursive destruction methods
///////////////////////////////////////////////////

.foreach t $(need_destroy)
// Recursively destroy this element and all elements in it.
void $t::destroy()
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple constructor class constructorbase
.foreach e ${allfields $t}
.set et ${type $t $e}
.if ${not ${member $(et) $(valuetypes)}}
    if( $e != $(et)NIL ){
.if ${member $(et) $(legacytypes)}
	rfre_$(et)( $e );
.else
	$e->destroy();
.endif
    }
.endif
.endforeach
    delete this;
.endswitch
}

.endforeach
.foreach t $(need_destroy_list)
// Recursively destroy this element and all elements in it.
void $t_list::destroy()
{
.if ${not ${member $t $(valuetypes)}}
    for( size_type ix=0; ix<sz; ix++ ){
	if( arr[ix] != $tNIL ){
.if ${member $t $(legacytypes)}
	    rfre_$t( arr[ix] );
.else
	    arr[ix]->destroy();
.endif
	}
    }
.endif
    delete this;
}

.endforeach
.endif
.if ${len $(need_print) $(need_print_list)}
///////////////////////////////////////////////////
//    print routines
///////////////////////////////////////////////////

.. Forward declarations
.call ansi_static print_list "void print_$$t_list( TmPrintState *, const $$t_list * )"
.call ansi_static print "void print_$$t( TmPrintState *, const $$t * )"
.foreach t $(need_print)
.set stic_$t "static "
.endforeach
.foreach t $(want_print)
.set stic_$t
.endforeach
.foreach t $(need_print)
// Print an element 't' of ${metatype $t} type '$t'
// using print optimizer.
$(stic_$t)void print_$t( TmPrintState *st, const $t *t )
{
    if( t == $tNIL ){
	st->printWord( "@" );
	return;
    }
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
    st->openTuple();
.foreach e ${allfields $t}
    print_${type $t $e}( st, t->$e );
.endforeach
    st->closeTuple();
.case constructor class constructorbase
.if ${len ${nonvirtual $t ${subclasses $t}}}
    switch( t->tag ){
.if ${isvirtual $t}
.else
	case TAG$t:
	    st->openConstructor();
	    st->printWord( "$t" );
.foreach e ${allfields $t}
	    print_${type $t $e}( st, t->$e );
.endforeach
	    st->closeConstructor();
	    break;

.endif
.foreach c ${nonvirtual ${subclasses $t}}
	case TAG$c:
	    print_$c( st, (const $c *) t );
	    break;

.endforeach
	default:
	    FATALTAG( t->tag );
    }
.else
    st->openConstructor();
    st->printWord( "$t" );
.foreach e ${allfields $t}
    print_${type $t $e}( st, t->$e );
.endforeach
    st->closeConstructor();
.endif
.endswitch
}

.endforeach
.foreach t $(need_print_list)
// Print list 'l' using print optimizer.
void print_$t_list( TmPrintState *st, const $t_list *l )
{
    st->openList();
    for( $t_list::size_type ix=0; ix<l->sz; ix++ ){
	print_$t( st, l->arr[ix] );
    }
    st->closeList();
}

.endforeach
.endif
.if ${len $(need_fprint) $(need_fprint_list)}
////////////////////////////////////////////////////
//   fprint routines
////////////////////////////////////////////////////

.. Forward declarations
.call ansi_static fprint_list "void fprint_$$t_list( FILE *, const $$t_list * )"
.call ansi_static fprint "void fprint_$$t( FILE *, const $$t * )"
.foreach t $(need_fprint)
.set stic_$t "static "
.endforeach
.foreach t $(want_fprint)
.set stic_$t
.endforeach
.foreach t $(need_fprint)
// Print ${metatype $t} $t element 't' to file 'f'.
$(stic_$t)void fprint_$t( FILE *f, const $t *t )
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
    putc( '(', f );
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    fputs( ",\n", f );
.endif
    fprint_${type $t $e}( f, t->$e );
.endforeach
    fputs( ")\n", f );
.if $(first)
    (void) t;
.endif
.case constructor constructorbase class
.set used 0
.if ${len ${nonvirtual ${subclasses $t}}}
.set used 1
    switch( t->tag ){
.if ${isvirtual $t}
.else
	case TAG$t:
	    fputs( "($t", f );
.foreach e ${allfields $t}
	    putc( ' ', f );
	    fprint_${type $t $e}( f, t->$e );
.endforeach
	    fputs( ")\n", f );
	    break;

.endif
.foreach c ${nonvirtual ${subclasses $t}}
	case TAG$c:
	    fprint_$c( f, (const $c *) t );
	    break;

.endforeach
	default:
	    FATALTAG( t->tag );
    }
.else
    fputs( "($t", f );
.foreach e ${allfields $t}
    putc( ' ', f );
    fprint_${type $t $e}( f, t->$e );
.set used 1
.endforeach
    fputs( ")\n", f );
.endif
.if ${not $(used)}
    (void) t;
.endif
.case constructor
.endswitch
}

.endforeach
.foreach t $(need_fprint_list)
.set stic_$t "static "
.endforeach
.foreach t $(want_fprint_list)
.set stic_$t
.endforeach
.foreach t $(need_fprint_list)
// Print a $t list 'l' to file 'f'.
$(stic_$t)void fprint_$t_list( FILE *f, const $t_list *l )
{
    if( l == $t_listNIL ){
	fputs( "@ ", f );
	return;
    }
    putc( '[', f );
    for( $t_list::size_type ix=0; ix<l->size(); ix++ ){
	if( ix!=0 ){
	    fputc( ',', f );
	}
	fprint_$t( f, l->arr[ix] );
    }
    fputs( "]\n", f );
}

.endforeach
.endif
.if 0
.if ${len $(need_clone) $(need_clone_list)}
///////////////////////////////////////////////////
//    Duplication routines
///////////////////////////////////////////////////

.foreach t $(need_clone)
// Clone this element
$t *$t::clone() const
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple constructor constructorbase class
.foreach e ${allfields $t}
.set et ${type $t $e}
.if ${member $(et) $(valuetypes)}
    $(et) i_$e = $e;
.else
    $(et) *i_$e = $e->clone();
.endif
.endforeach
    return $t( ${seplist ", " ${prefix "i_" ${allfields $t}}} );
.endswitch
}

.endforeach
.foreach t $(need_clone_list)
// Return a recursive duplicate of this list
$t_list *$t_list::clone() const
{
    $t_list *nw = new $t_list( sz );
    value_type *ar = nw->arr;
    value_type *o_r = arr;
    for( size_type ix=0; ix<sz; ix++ ){
.if ${member $t $(valuetypes)}
	*ar++ = *o_r++;
.else
	*ar++ = (*o_r)->clone();
	o_r++;
.endif
    }
    nw->sz = sz;
    return nw;
}

.endforeach
.endif
.endif
.if ${len $(need_slice_list)}
///////////////////////////////////////////////////
//    Slice routines
///////////////////////////////////////////////////

.foreach t $(need_slice_list)
// Recursively duplicate elements,
// starting at element 'b', and ending at element
// 'e'. Element 'e' is not copied.
$t_list *$t_list::slice( const size_type b, const size_type parm_e ) const
{
    size_type e = parm_e;

    if( e>sz ){
	e = sz;
    }
    if( b>e ){
	FATAL( tm_badslice );
    }
    $t_list *nw = new $t_list( e-b );
    for( size_type ix=b; ix<e; ix++ ){
.if ${member $t $(valuetypes)}
	nw->append( arr[ix] );
.else
	nw->append( arr[ix]->clone() );
.endif
    }
    return nw;
}

.endforeach
.endif
.if ${len $(need_compare) $(need_compare_list)}
///////////////////////////////////////////////////
//    Comparison routines
///////////////////////////////////////////////////

.. Forward declarations
.call ansi_static compare_list "int compare( const $$t_list &, const $$t_list & )"
.call ansi_static compare "int compare( const $$t &, const $$t & )"
.foreach t $(need_compare)
.if ${member $t $(want_compare)}
.set stat
.else
.set stat "static "
.endif
// Compare two $t ${metatype $t}s.
$(stat)int compare( const $t &a, const $t &b )
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
.if ${len ${allfields $t}}
    int res;

.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    if( res != 0 ){
	return res;
    }
.endif
.if ${member ${type $t $e} $(valuetypes)}
    res = compare( a.$e, b.$e );
.else
    res = compare( *(a.$e), *(b.$e) );
.endif
.endforeach
    return res;
.else
    (void) a;
    (void) b;
    return 0;
.endif
.case constructor constructorbase class
    int res = ((int) a.tag - (int) b.tag);
    if( res != 0 ){
	return res;
    }
.if ${len ${nonvirtual ${subclasses $t}}}
    switch( a.tag )
    {
.if ${not ${isvirtual $t}}
	case TAG$t:
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
	    if( res != 0 ){
		return res;
	    }
.endif
.if ${member ${type $t $e} $(valuetypes)}
	    res = compare( a.$e, b.$e );
.else
	    res = compare( *(a.$e), *(b.$e) );
.endif
.endforeach
	    break;

.endif
.foreach c ${nonvirtual ${subclasses $t}}
	case TAG$c:
	    res = compare( (const $c &) a, (const $c &) b );
	    break;

.endforeach
	default:
	    FATALTAG( a.tag );
	    break;
    }
.else
.if ${isvirtual $t}
    res = 0;
.else
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    if( res != 0 ){
	return res;
    }
.endif
.if ${member ${type $t $e} $(valuetypes)}
    res = compare( a.$e, b.$e );
.else
    res = compare( *(a.$e), *(b.$e) );
.endif
.endforeach
.endif
.endif
    return res;
.endswitch
}

.endforeach
.foreach t $(need_compare_list)
.if ${member $t $(want_compare_list)}
.set stat
.else
.set stat "static "
.endif
// Compare two $t lists.
$(stat)int compare( const $t_list &a, const $t_list &b )
{
    int res;
    $t_list::size_type ix = 0;
    while( ix<a.size() || ix<b.size() ){
	if( ix>=a.size() ){
	    return -1;
	}
	if( ix>=b.size() ){
	    return 1;
	}
.if ${member $t $(valuetypes)}
	res = compare( a.arr[ix], b.arr[ix] );
.else
	res = compare( *(a.arr[ix]), *(b.arr[ix]) );
.endif
	if( res != 0 ){
	    return res;
	}
	ix++;
    }
    return 0;
}

.endforeach
.endif
.if ${len $(need_fscan) $(need_fscan_list)}
///////////////////////////////////////////////////
//    Scan routines
///////////////////////////////////////////////////

.call ansi_static fscan_list "int fscan_$$t_list( FILE *, $$t_list ** )"
.call ansi_static fscan "int fscan_$$t( FILE *, $$t ** )"

.foreach t $(need_fscan)
.set stic_$t "static "
.endforeach
.foreach t $(want_fscan)
.set stic_$t
.endforeach
.foreach t $(need_fscan)
// Read a ${metatype $t} of type $t
// from file 'f' and allocate space for it.
// Set the pointer 'p' to point to that structure.
$(stic_$t)int fscan_$t( FILE *f, $t **p )
{
.switch ${metatype $t}
.case alias
.error Internal error: alias $t still present.
.case tuple
    int err;
.foreach e ${allfields $t}
.set et ${type $t $e}
.if ${member $(et) $(valuetypes) $(legacytypes)}
    $(et) l_$e;
.else
    $(et) *l_$e;
.endif
.endforeach

.. Note that separate assignment is necessary, since there may
.. be weird <type>NIL definitions ..
.foreach e ${allfields $t}
    l_$e = ${type $t $e}NIL;
.endforeach
    *p = $tNIL;
    err = tm_fneedc( f, '(' );
    if( err ){
	return 1;
    }
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    if( !err ){
	err = tm_fneedc( f, ',' );
    }
.endif
    if( !err ){
	err = fscan_${type $t $e}( f, &l_$e );
    }
.endforeach
    *p = new $t( ${seplist ", " ${prefix " l_" ${allfields $t}}} );
    if( err ){
	return 1;
    }
    return tm_fneedc( f, ')' );
.case constructorbase constructor class
    int n;
.. First, determine the length of the largest constructor name.
.set maxlen 1
.foreach c ${nonvirtual $t ${subclasses $t}}
.set maxlen ${max $(maxlen) ${strlen $c}}
.endforeach
.. Add some space for '\0' and safety..
.set maxlen $[$(maxlen)+4]
    char tm_word[$(maxlen)];	// Largest constructor should fit in it..
    int err;

.if ${not ${len ${nonvirtual $t ${subclasses $t}}}}
.endif
    *p = $tNIL;
    n = tm_fscanopenbrac( f );
    err = tm_fscanspace( f );
    if( err ){
	return 1;
    }
    if( tm_fscancons( f, tm_word, $(maxlen) ) ){
	return 1;
    }
.. First time in loop there should be no 'else' before the if,
.. in all other cases there should.
.set els
.if ${not ${isvirtual $t}}
    $(els)if( strcmp( tm_word, "$t" ) == 0 ){
.foreach e ${allfields $t}
.set et ${type $t $e}
.if ${member $(et) $(valuetypes) $(legacytypes)}
	${type $t $e} l_$e = $(et)NIL;
.else
	${type $t $e} *l_$e = $(et)NIL;
.endif
.endforeach

.foreach e ${allfields $t}
	if( !err ){
	    err = fscan_${type $t $e}( f, &l_$e );
	}
.endforeach
	*p = new $t( ${seplist ", " ${prefix " l_" ${allfields $t}}} );
    }
.set els "else "
.endif
.foreach c ${nonvirtual ${subclasses $t}}
    $(els)if( strcmp( tm_word, "$c" ) == 0 ){
.foreach e ${allfields $c}
.set et ${type $c $e}
.if ${member $(et) $(valuetypes) $(legacytypes)}
	$(et) l_$e;
.else
	$(et) *l_$e;
.endif
.endforeach

.foreach e ${allfields $c}
	l_$e = ${type $c $e}NIL;
	if( !err ){
	    err = fscan_${type $c $e}( f, &l_$e );
	}
.endforeach
	*p = new $c( ${seplist ", " ${prefix " l_" ${allfields $c}}} );
    }
.set els "else "
.endforeach
    else {
	(void) sprintf( tm_errmsg, tm_badcons, "$t", tm_word );
	err = 1;
    }
    if( err ){
	return 1;
    }
    return tm_fscanclosebrac( f, n );
.case constructor
.error Internal botch: fscan_$t requested
.endswitch
}

.endforeach
.foreach t $(need_fscan_list)
.set stic_$t "static "
.endforeach
.foreach t $(want_fscan_list)
.set stic_$t
.endforeach
.foreach t $(need_fscan_list)
// Read an instance of a list of datastructure of type $t
// from file 'f' and allocate space for it. Set the pointer 'p' to
// point to that structure.
$(stic_$t)int fscan_$t_list( FILE *f, $t_list **p )
{
    $t_list::value_type nw;
    int err = 0;

    *p = $t_listNIL;
    int n = tm_fscanopenbrac( f );
    if( tm_fscanspace( f ) ){
	return 1;
    }
    if( tm_fneedc( f, '[' ) ){
	return 1;
    }
    *p = new $t_list();
    if( tm_fscanspace( f ) ){
	return 1;
    }
    int c = getc( f );
    if( c == ']' ){
	return 0;
    }
    if( c == EOF ){
	(void) strcpy( tm_errmsg, tm_badeof );
	return 1;
    }
    ungetc( c, f );
    for(;;){
	if( !err ){
	    err = fscan_$t( f, &nw );
	}
	if( err ){
	    return 1;
	}
	(*p)->append( nw );
	if( tm_fscanspace( f ) ){
	    return 1;
	}
	c = getc( f );
	if( c == EOF ){
	    (void) strcpy( tm_errmsg, tm_badeof );
	    return 1;
	}
	if( c != ',' ){
	    ungetc( c, f );
	    break;
	}
    }
    if( tm_fneedc( f, ']' ) ){
	return 1;
    }
    return tm_fscanclosebrac( f, n );
}

.endforeach
.endif
.if ${len $(need_erase_list)}
///////////////////////////////////////////////////
//    erase methods
///////////////////////////////////////////////////

.foreach t $(need_erase_list)
// Remove the element at position 'pos'
void $t_list::erase( const size_type pos )
{
    if( pos >= sz ){
	return;
    }
.if ${not ${member $t $(valuetypes)}}
    if( arr[pos] != $tNIL ){
.if ${member $t $(legacytypes)}
	rfre_$t( arr[pos] );
.else
	arr[pos]->destroy();
.endif
    }
.endif
    sz--;
    for( size_type ix=pos; ix<sz; ix++ ){
	arr[ix] = arr[ix+1];
    }
}

// Remove all elements from position 'from' up to, but not including 'to'
void $t_list::erase( const size_type from, const size_type to )
{
    size_type real_to = to;

    if( real_to>sz ){
	real_to = sz;
    }
    if( from>=real_to ){
	return;
    }
.if ${not ${member $t $(valuetypes)}}
    for( size_type ix=from; ix<real_to; ix++ ){
	if( arr[ix] != $tNIL ){
.if ${member $t $(legacytypes)}
	    rfre_$t( arr[ix] );
.else
	    arr[ix]->destroy();
.endif
	}
    }
.endif
    size_type dist = real_to-from;
    sz -= dist;
    for( size_type ix=from; ix<sz; ix++ ){
	arr[ix] = arr[ix+dist];
    }
}

.endforeach
.endif
.if ${len $(need_extract_list)}
///////////////////////////////////////////////////
//    extract methods
///////////////////////////////////////////////////

.foreach t $(need_extract_list)
// Extract '$t' element at position 'pos'.
bool $t_list::extract(
    const size_type pos,
    value_type *e
)
{
    if( pos >= sz ){
	return 0;
    }
    *e = arr[pos];
    sz--;
    for( size_type ix=pos; ix<sz; ix++ ){
	arr[ix] = arr[ix+1];
    }
    return 1;
}

.endforeach
.endif
.if ${len $(need_extractlist_list)}
///////////////////////////////////////////////////
//    extractlist_<type>_list routines
///////////////////////////////////////////////////

.foreach t $(need_extractlist_list)
// Given a range 'from' to 'to', create and return a new list
// '*res', and move the elements from 'from' up to, but not including
// 'to' to this new list. All elements beyond the range are moved down
// to close the gap. If necessary, the range is silently adjusted to
// cover only existing elements.
$t_list *$t_list::extractlist( size_type from, size_type to )
{
    if( to>=sz ){
	to = sz;
    }
    if( from>to ){
	from = to;
    }
    size_type ressz = to - from;
    $t_list *res = new $t_list( ressz );
    // Copy in elements into 'res'.
    {
	size_type cnt = ressz;
	value_type *sp = &arr[from];
	value_type *dp = res->arr;

	while( cnt!=0 ){
	    *dp++ = *sp++;
	    cnt--;
	}
    }
    res->sz = ressz;
    sz -= ressz;
    for( size_type ix=from; ix<sz; ix++ ){
	arr[ix] = arr[ix+ressz];
    }
    return res;
}

.endforeach
.endif
.if ${len $(need_misc)}
///////////////////////////////////////////////////
//    Miscellaneous routines
///////////////////////////////////////////////////
.if ${member stat_$(basename) $(need_misc)}
// Print allocation and freeing statistics to file 'f'.
void stat_$(basename)( FILE *f )
{
.if ${len ${nonvirtual $(need_stat) $(need_stat_list)}}
    const char tm_allocfreed[] = "%-20s: %6ld allocated, %6ld freed.%s\n";

.foreach t ${sort ${nonvirtual $(need_stat)}}
    fprintf(
	f,
	tm_allocfreed,
	"$t",
	$t::newcount,
	$t::freecount,
	(($t::newcount==$t::freecount)? "": "<-")
    );
.endforeach
.foreach t ${sort $(need_stat_list)}
    fprintf(
	f,
	tm_allocfreed, "$t_list",
	$t_list::newcount,
	$t_list::freecount,
	(($t_list::newcount==$t_list::freecount)? "": "<-")
    );
.endforeach
.endif
}

.endif
.if ${member get_balance_$(basename) $(need_misc)}
// Return -1 if there is a structure that has freed more than allocated, or
// else return 1 if there is a structure that has been freed less than
// allocated, or else return 0.
int get_balance_$(basename)( void )
{
    // Check for too many fre()s.
.foreach t $(need_stat_list)
    if( $t_list::newcount<$t_list::freecount ){
	return -1;
    }
.endforeach
.foreach t ${nonvirtual $(need_stat)}
    if( $t::newcount<$t::freecount ){
	return -1;
    }
.endforeach
    // Check for too few free()s. 
.foreach t $(need_stat_list)
    if( $t_list::newcount>$t_list::freecount ){
	return 1;
    }
.endforeach
.foreach t ${nonvirtual $(need_stat)}
    if( $t::newcount>$t::freecount ){
	return 1;
    }
.endforeach
    return 0;
}

.endif
.endif
// ---- end of ${tplfilename} ----
// Code generation required ${processortime} milliseconds.
