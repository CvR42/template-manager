This is Tm, a template preprocessor. It was designed as a code generator for
recursive data structure handling, but it is more general than that.
It allows the use of templates similar to those in C++ in *any* programming
language.

See the section 'What is Tm' below for a more detailed explanation.

Tm is copyrighted. However, provided that you observe certain guidelines,
you are free to copy and use it. All distribution packages contain
a LICENCE file that explains this in detail.


Beta versions
=-=-=-=-=-=-=

The FTP site now also may have a beta version available. These versions
are clearly indicated with a 'beta' or 'b' in the filename. If they are
made available to the public I am reasonably confident that there are
no bugs, but these versions are not as well-tested as release versions.


The available packages
=-=-=-=-=-=-=-=-=-=-=-

The Tm packages are available for downloading by anonymous ftp from the site
ftp.cp.tn.tudelft.nl in the directory /pub/software/Tm. (If you are
reading this on the ftp site you already knew that :-)).

You are unlikely to need all files in the Tm distribution, so please make
your own selection:

CHANGES.tmkernel	The CHANGES file from the most recent version of
			the tmkernel distribution. It lists the new features
			of each version.
tmkernel-1.1.3.tar.gz	The kernel of Tm: the sources for the program
			itself, a set of templates for the programming
			language C, and a support library for C.
			It unpacks in the directory tmkernel-1.1.3.
tmk113.zip		The same as tmkernel-1.1.3.tar.gz, but now packed
			as a zip file.  It unpacks in the directory tmk113.
tmdemo-1.0.tar.gz	A set of two small demonstration programs using the
			C template. The first program parses a list of
			assignments, the second program folds constant
			expressions in these assignments. Only works with
			version 2.0 of the tm kernel distribution,
			currently only available as beta version.
CHANGES.tmpas		The CHANGES file from the most recent version of
			the tmpas distribution. It lists the new features
			of each version.
tmpas-1.0.2.tar.gz	A Pascal template for Tm. Please note that
			this template is only lightly tested, and not
			as sophisticated as the C template.
			It unpacks in the directory tmpas-1.0.1.
tmp102.zip		The same as tmpas-1.0.1.tar.gz, but now packed
			as a zip file.  It unpacks in the directory tmp101.
CHANGES.tmmira		The CHANGES file from the most recent version of
			the tmmira distribution. It lists the new features
			of each version.
tmmira-1.0.2.tar.gz	A Miranda template for Tm. Please note that
			this template is only lightly tested, and not
			as sophisticated as the C template.
			It unpacks in the directory tmmira-1.0.1.
articles		A directory with some articles on Tm.

To see what is new in these distribution files, read the file
CHANGES.tmkernel, CHANGES.tmpas or CHANGES.tmmira.

Unpacking
=-=-=-=-=

All files ending with '.tar.gz' are tar files that have been compressed
with 'gzip', so to unpack the file 'tmkernel-1.1.3.tar.gz' you must do

 gunzip tmkernel-1.1.3.tar.gz
 tar xf tmkernel-1.1.3.tar

If you don't have gzip, you will have to install it first. It is widely
avialable on the Internet and from other sources of freeware/shareware.

All files ending with '.zip' are zip files, so to unpack the file
'tmk113.zip' you must do

 unzip tmk113.zip


Keep me informed
=-=-=-=-=-=-=-=-

Although I don't want to make money from Tm, I would like to know who is
using it, and what they think of it. Send an email to
reeuwijk@cp.tn.tudelft.nl, or - better still - send me a postcard. So, if
you like the program, do the following:

1. Get a nice postcard. I like to see the world in picture postcards, so
   pick one that will show me what it looks like where you live.

2. Write on it what you think of the program, or just say 'hi'.

3. Mail it to:
       Kees van Reeuwijk
       Bart Verhallenplein 154
       3122 TH  Schiedam
       The Netherlands

Yes, I could have made this postcard-ware, but I am getting quite alergic
to people spreading around bad software and making claims about other
people's moral obligations.

So, I do it like this. The only moral obligation you have is that you do
not make money of my software, or pretend it is your property. Apart from
that I am happy if you just use the software, although I really
appreciate it if you send me the postcard.

What is Tm?
=-=-=-=-=-=

Given a datastructure specification such as:

pos == ( line:int file:string );

expr ::= 
    ExprConst constpos:pos n:int |
    ExprPlus pluspos:pos terms:[expr] |
    ExprMult multpos:pos factors:[expr] 

It can generate C, Pascal, Lisp, or Miranda code to manipulate these
datastructures. Since this code is generated using code templates,
support for other languages can be added easily.  If necessary, code to
manipulate lists of these types will also be generated.

For example, the C code generation templates can generate code to:
- Allocate and fill new instances of the defined types, and to
  free those instances.
- Write out ASCII representations of instances of these types to a file,
  and read them in.
- Comparison of two instances.
- Manipulations on lists: append to, insert in, delete from, reverse,
  concatenate.
- Duplication of complete and partial data structures.

Only the functions that are explicitly requested by the user are made
available. Any functions that are necessary to implement the requested
functions are also generated, but will be made 'static'.
Alternatively, all possible functions can be generated.

For example, for 'pos' and 'expr' the C template could generate the
following functions:
- Create a new instance:
    pos new_pos( int line, string file );
    expr new_ExprConst( pos constpos, int n );
    expr new_ExprPlus( pos pluspos, expr_list terms );
    expr new_ExprMult( pos multpos, expr_list factors );
    expr_list new_expr_list( void );
- Free an instance:
    void rfre_pos( pos e );
    void rfre_expr( expr e );
    void rfre_expr_list( expr_list l );
- Write an instance to a file:
    void fprint_pos( FILE *f, pos e );
    void fprint_expr( FILE *f, expr e );
    void fprint_expr_list( FILE *f, expr_list l );
- Read back an instance from a file:
    int fscan_pos( FILE *f, pos *e );
    int fscan_expr( FILE *f, expr *e );
    int fscan_expr_list( FILE *f, expr_list *e );
- Comparison:
    int cmp_pos( pos a, pos b );
    int cmp_expr( expr a, expr b );
    int cmp_expr_list( expr_list a, expr_list b );
- List manipulation:
    expr append_expr_list( expr_list l, expr e );
    expr_list concat_expr_list( expr_list la, expr_list lb );
    expr_list insert_expr_list( expr_list l, unsigned p, expr e );
    expr_list delete_expr_list( expr_list l, unsigned p );
    expr_list reverse_list( expr_list l );
- Duplication:
    pos rdup_pos( pos e );
    expr rdup_expr( expr e );
    expr_list rdup_expr_list( expr_list e );
    expr_list slice_expr_list( expr_list e, unsigned b, unsigned e );

Nested list manipulation functions can also be generated. If you want,
you can get:
    expr_list_list_list rdup_expr_list_list_list(
     expr_list_list_list l
    );

To generate code for a new language, a template must be constructed.
A template is a source text for the target language interspersed
with commands for the template generator. There are also constructs
to generate a range of lines repeatedly, and conditionally.

For example, if the function ${typelist} is encountered in the template,
it is replaced with a list of known types, and the construct

.forall i a b c
.endforall


Will assign 'a', 'b' and 'c' to the variable 'i', and generate the text
within the .forall for each of these cases. Therefore:

.forall i ${typelist}
Type: $(i)
.endforall

Together with the type definitions above will generate:

Type: pos
Type: expr

Of course, there are also functions to list the field names of a
given type, and to retrieve the type of a given field.

Tm described in detail in:

C. van Reeuwijk, Tm: a Code Generator for Recursive Data Structures,
Software - Practice and Experience, Volume 22(10) 899-908 (October
1992)
