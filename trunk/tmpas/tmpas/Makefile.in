# Tm - an interface code generator.
# Copyright (C) 1991, Delft University of Technology and C. van Reeuwijk.
#
# This software is distributed under the terms of the GNU General Public
# Licence as published by the Free Software Foundation. See the file 'LICENCE'
# in the root directory of this distribution for details.
 
# tm Pascal support make file

VERSION = 2

# debugging flags
DBUG =
LDFLAGS	=

# program extention
# .ttp for GEMDOS
# .exe for MSDOS
EXT=

# Pascal compilation flags
PFLAGS = $(SYSPFLAGS) $(DBUG)

# Some names of programs
TM  = tm
LINKER = pc

LIBS = $(PLIBLOC)

MAKEFILE = Makefile

DOC	=

JUNK = tmp core makelog stestprog$(EXT) testmass$(EXT) testout testtmp stamp.t \
    tmpas.aux tmpas.log tmpas.dvi tmpas.alw version.tex $(TMSRCS) $(TMHDRS) \
    $(OBJS) tmp.p config.cache config.log config.status

TESTFILES = test.ds testdata testconf.t

DISTFILES = $(TMMODULES) $(TESTFILES) $(TESTSRCS) $(DOC) $(MAKEFILE)

TMMODULES = pasgvar.pt pasvar.pt pascode.pt pastype.pt pasneed.t paslib.pt \
	    paslib.ht pascode.ht

TMSRCS      = testcode.p testmass.p demo.p

TMHDRS      = testcode.h testtype.h

TESTSRCS    = testmass.pt testcode.ht testcode.pt testmain.p testtype.ht

OBJS = demo.o stringhandler.o testcode.o testmain.o testmass.o

INSTALLPATH = @prefix@

#  IDIR     : include directory
#  LDIR     : library directory
IDIR = $(INSTALLPATH)/include
LDIR = $(INSTALLPATH)/lib

help :
	@echo " Possible make targets:"
	@echo "all		Create local running programs."
	@echo "clean		Free all intermediate files."
	@echo "empty		Free files that can be reconstructed."
	@echo "distfiles	List distribution files."
	@echo "install		Install relevant files."
	@echo "test		Run tests."

all: test$(EXT)

# Add rules for the programs themselves here.

# Testing is done in two parts: once as one big program
# (resulting in executable 'testmass'), and once as two
# separately compiled programs (resulting in executable 'testsep').
# The second version has a separate, non-standard, rule testsep.
test: testmass$(EXT)
	./testmass$(EXT) <testdata > testtmp
	./testmass$(EXT) <testtmp > testout
	diff testtmp testout

testsep: stestprog$(EXT)
	./stestprog$(EXT) <testdata > testtmp
	./stestprog$(EXT) <testtmp > testout
	diff testtmp testout

TESTSEPOBJS    = testcode.o testmain.o
stestprog$(EXT): $(TESTSEPOBJS)
	$(LINKER) $(LDFLAGS) $(TESTSEPOBJS) $(LIBS) -o stestprog$(EXT)

TESTMASSOBJS    = testmass.o
testmass$(EXT): $(TESTMASSOBJS)
	$(LINKER) $(LDFLAGS) $(TESTMASSOBJS) $(LIBS) -o testmass$(EXT)

install:
	cp pasneed.t $(LDIR)/pasneed.t
	echo '.insert $$(libpath)$$(pathsep)pasneed.t' > instmp
	cat instmp paslib.pt > $(LDIR)/paslib.pt
	cat instmp pastype.pt > $(LDIR)/pastype.pt
	cat instmp pasvar.pt > $(LDIR)/pasvar.pt
	cat instmp pasgvar.pt > $(LDIR)/pasgvar.pt
	cat instmp pascode.pt > $(LDIR)/pascode.pt
	rm -f instmp

clean:
	rm -f $(JUNK)

empty:
	rm -f $(JUNK)

distfiles: $(MAKEFILE)
	@echo $(DISTFILES) | tr ' ' '\012'

distlist: $(MAKEFILE)
	echo $(DISTFILES) | tr ' ' '\012' > distlist

setup:
	modmake local ../make.local $(MAKEFILE)

# Non-standard make rules

testmass.p : testmass.pt testconf.t test.ds $(TMMODULES)
	$(TM) test.ds testmass.pt > testmass.p

testcode.p : testcode.pt testconf.t test.ds pascode.pt paslib.pt
	$(TM) test.ds testcode.pt > testcode.p

testtype.h : testtype.ht testconf.t test.ds pastype.pt
	$(TM) test.ds testtype.ht > testtype.h

testcode.h : testcode.ht testconf.t test.ds pascode.ht paslib.ht
	$(TM) test.ds testcode.ht > testcode.h

testmass.o: testmass.p
	pc -c $(PFLAGS) $<
	
# Note that testmass.p has a separate rule using less trickery
.p.o:
	ln $< $*.c
	cc -E -I$(IDIR) -D$(SYS) $*.c | sed -e '/^#/d' >tmp.p
	rm -f $*.c
	pc -c $(PFLAGS) tmp.p
	mv tmp.o $@
	rm -f tmp.p

###
testcode.o: testtype.h
testmain.o: testtype.h testcode.h
